<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\Employer\Employer;
use App\Models\User;
use Illuminate\Auth\Events\Registered;
use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Validation\Rules;
use Illuminate\Validation\Rules\Password;
use Illuminate\Validation\ValidationException;
use Inertia\Inertia;
use Inertia\Response;

class RegisteredUserController extends Controller
{
    /**
     * Show the registration page.
     */
    public function create(): Response
    {
        return Inertia::render('auth/register');
    }

    /**
     * Handle an incoming registration request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        // üß≠ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π —Å –æ–¥–Ω–æ–≥–æ IP
        $this->ensureIsNotRateLimited($request);

        // üß∞ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        $validated = $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => [
                'required_without:phone',
                'max:255',
                'unique:users,email',
            ],
            'phone' => [
                'required_without:email',
                'regex:/^\+?[0-9]{9,15}$/',
                'unique:users,phone',
            ],
            'password' => [
                'required',
                'confirmed',
                Password::min(8)
                    ->numbers()
                    ->uncompromised(),
            ],
            'role' => ['required', 'string', 'in:jobseeker,employer'],
        ], [
            // üßç‚Äç –ò–º—è
            'name.required' => '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.',
            'name.string' => '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π.',
            'name.max' => '–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 255 —Å–∏–º–≤–æ–ª–æ–≤.',

            // üìß Email
            'email.required_without' => '–£–∫–∞–∂–∏—Ç–µ email –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.',
            'email.email' => '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.',
            'email.max' => 'Email –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 255 —Å–∏–º–≤–æ–ª–æ–≤.',
            'email.unique' => '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —ç—Ç–∏–º email ‚Äî –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.',

            // üì± –¢–µ–ª–µ—Ñ–æ–Ω
            'phone.required_without' => '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email.',
            'phone.regex' => '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +992999999999 (–æ—Ç 9 –¥–æ 15 —Ü–∏—Ñ—Ä).',
            'phone.unique' => '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.',

            // üîê –ü–∞—Ä–æ–ª—å
            'password.required' => '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.',
            'password.confirmed' => '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.',
            'password.min' => '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤.',
            'password.numbers' => '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.',
            'password.uncompromised' => '–≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π.',

            // üß≠ –†–æ–ª—å
            'role.required' => '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å (—Å–æ–∏—Å–∫–∞—Ç–µ–ª—å –∏–ª–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å).',
            'role.string' => '–†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π.',
            'role.in' => '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞.',
        ]);


        // üîê –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é
        $userData = [
            'name' => $validated['name'],
            'password' => Hash::make($validated['password']),
        ];

        if (!empty($validated['email'])) {
            $userData['email'] = strtolower($validated['email']);
        }

        if (!empty($validated['phone'])) {
            $userData['phone'] = $validated['phone'];
        }

        // üß± –ó–∞—â–∏—Ç–∞ –æ—Ç mass assignment ‚Äî —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ –º–æ–¥–µ–ª–∏ User —É–∫–∞–∑–∞–Ω—ã $fillable
        $user = User::create($userData);

        $user->assignRole($validated['role']);

        // üëî –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if ($validated['role'] === 'employer') {
            Employer::create([
                'user_id' => $user->id,
            ]);
        }

        event(new Registered($user));

        Auth::login($user);

        return redirect()->intended(route('dashboard', absolute: false));
    }

    protected function ensureIsNotRateLimited(Request $request): void
    {
        $key = 'register:' . $request->ip();

        // –†–∞–∑—Ä–µ—à–∞–µ–º 5 –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ 1 –º–∏–Ω—É—Ç—É
        RateLimiter::for('register', function () use ($key) {
            return Limit::perMinute(5)->by($key);
        });

        if (RateLimiter::tooManyAttempts($key, 5)) {
            throw ValidationException::withMessages([
                'email' => '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.',
            ]);
        }

        RateLimiter::hit($key);
    }

}
